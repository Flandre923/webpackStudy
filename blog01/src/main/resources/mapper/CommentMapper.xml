<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybaits.org//DTD Mapper 3.0//EN"
        "http://mybaits.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.CommentMapper">


        <resultMap id="pageComment" type="com.example.pojo.params.PageComment">
              <id property="id" column="id"/>
            <result property="nickname" column="nickname"/>
            <result property="content" column="content"/>
            <result property="avatar" column="avatar"/>
            <result property="createTime" column="create_time"/>
            <result property="website" column="website"/>
            <result property="parentCommentId" column="parent_comment_id"/>
            <result property="parentCommentNickname" column="parent_comment_nickname"/>
        </resultMap>
    <!--查询页面展示的评论List-->
        <select id="getPageCommentListByPageAndParentCommentId" resultMap="pageComment">
            SELECT
                c1.id,
                c1.nickname,
                c1.content,
                c1.avatar,
                c1.create_time,
                c1.website,
                c1.parent_comment_id AS parent_comment_id,
                c2.nickname AS parent_comment_nickname 
            FROM
                COMMENT AS c1
                LEFT JOIN COMMENT AS c2 ON c1.parent_comment_id = c2.id 
            WHERE
                c1.page = #{page}
                <if test="page==0 and blogId!=null">
                    and c1.blog_id=#{blogId}
                </if>
                AND c1.parent_comment_id = -1
                AND c1.is_published = TRUE 
            ORDER BY
                c1.create_time DESC
        </select>

  <resultMap id="comment" type="com.example.pojo.Comment">
        <id property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="content" column="content"/>
        <result property="avatar" column="avatar"/>
        <result property="createTime" column="create_time"/>
        <result property="published" column="is_published"/>
        <result property="page" column="page"/>
        <result property="parentCommentId" column="parent_comment_id"/>
        <result property="website" column="website"/>
        <association property="blog" javaType="com.example.pojo.params.BlogIdAndTitle">
            <id property="id" column="blog_id"/>
            <result property="title" column="title"/>
        </association>
    </resultMap>

<!--    按父评论id查询评论list-->
    <select id="getListByParentCommentId" resultMap="comment">
        SELECT
        c.id,
        c.nickname,
        c.email,
        c.content,
        c.avatar,
        c.create_time,
        c.is_published,
        c.page,
        c.parent_comment_id,
        c.website,
        c.blog_id,
        b.title
        FROM
        COMMENT AS c
        LEFT JOIN blog AS b ON c.blog_id = b.id
        WHERE
        c.parent_comment_id =#{parentCommentId}
    </select>
<!-- 查询页面下的评论-->
    <select id="getListByPageAndParentCommentId" resultMap="comment">
        SELECT
        c.id,
        c.nickname,
        c.email,
        c.content,
        c.avatar,
        c.create_time,
        c.is_published,
        c.page,
        c.parent_comment_id,
        c.website,
        c.blog_id,
        b.title
        from comment as c left join blog as b on c.blog_id=b.id
        <where>
            <if test="page!=null">
                c.page=#{page}
            </if>
            <if test="page==0 and blogId!=null">
                and c.blog_id=#{blogId}
            </if>
            and c.parent_comment_id=#{parentCommentId}
        </where>
    </select>
<!--    通过id查询-->
    <select id="getCommentById" resultType="comment">
        SELECT
        `comment`.id,
        `comment`.nickname,
        `comment`.email,
        `comment`.content,
        `comment`.avatar,
        `comment`.create_time,
        `comment`.is_published,
        `comment`.page,
        `comment`.blog_id,
        `comment`.parent_comment_id,
        `comment`.website
        FROM
        `comment`
        WHERE
        `comment`.id = #{id}
    </select>
<!--    更新公开状态-->
    <update id="updateCommentPublishedById">
        update comment set is_published=#{published} where id=#{commentId}
    </update>
    <!--按id删除评论-->
    <delete id="deleteCommentById">
        delete from comment where id=#{id}
    </delete>
    <!--按博客id删除博客下所有评论-->
    <delete id="deleteCommentsByBlogId">
        delete from comment where blog_id=#{blogid}
    </delete>
    <!--更新评论-->
    <update id="updateComment">
        update comment set nickname=#{nickname}, avatar=#{avatar}, email=#{email}, ip=#{ip}, content=#{content}, website=#{website}
        where id=#{id}
    </update>

    <!--按页面查询评论数量-->
    <select id="countByPageAndIsPublished" resultType="java.lang.Integer">
        select count(*) from comment
        where page=#{page}
        <if test="page==0 and blogId!=0">
            and blog_id=#{blogId}
        </if>
    </select>

    <!--查询所有评论数量-->
    <select id="countComment" resultType="java.lang.Integer">
        select count(*) from comment
    </select>

    <!--保存评论-->
    <insert id="saveComment" useGeneratedKeys="true" keyProperty="id">
        insert into comment (
        `comment`.id,
        `comment`.nickname,
        `comment`.email,
        `comment`.content,
        `comment`.avatar,
        `comment`.create_time,
        `comment`.is_published,
        `comment`.page,
        `comment`.blog_id,
        `comment`.parent_comment_id,
        `comment`.website
        )
        values (#{nickname}, #{email}, #{content}, #{avatar}, #{createTime}, #{website}, #{ip}, #{published}, #{adminComment},
        #{page}, #{notice}, #{parentCommentId}, #{blogId}, #{qq})
    </insert>
</mapper>
